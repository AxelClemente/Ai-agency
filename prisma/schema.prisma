// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define tus modelos aquí
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  location      String?
  role          Role?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
}

model VerificationToken {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier  String
  token       String   @unique
  expires     DateTime

  @@unique([identifier, token])
}

model PasswordResetCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  code      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

enum Role {
  BUSINESS
  CUSTOMER
  STAFF
  ADMIN
}

model Conversation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  agentId     String   // Identificador del agente de ElevenLabs
  transcript  String   // Transcripción completa
  duration    Int      // duración en segundos
  cost        Float    // costo en créditos
  startedAt   DateTime @default(now())
  endedAt     DateTime @updatedAt
  status      String   // 'completed', 'interrupted', 'failed'
  
  messages    Json[]   // Array de mensajes con métricas
  metrics     Json     // Métricas agregadas de la conversación
  metadata    Json?    // Otros metadatos
  
  user        User     @relation(fields: [userId], references: [id])
  
  analysis    ConversationAnalysis?
  
  @@index([userId])
  @@index([agentId])
}

model ConversationAnalysis {
  id              String   @id @default(cuid())
  conversationId  String   @unique @db.ObjectId
  programmaticData Json    // análisis actual (productos, estado, etc)
  aiInsights      Json?    // conclusiones IA (opcional)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relación con conversación
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}
