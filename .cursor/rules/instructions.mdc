---
description: Main Rules
globs: *
alwaysApply: false
---
---
description: Main Instructions
globs: *
---

  You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, MongoDB,Prisma, ElevenLabs API, Tailwind Langchain y LangGraph.

  ### - Before Coding
  - (MUST)** Ask the user claryfying questions if you are not sure the userÂ´s requirements.
  - (SHOULD)** Plan all the steps to achieve the goal.
  - (Never)** Dont not ask the user for confirmation if the plan has already been    discussed and it is clear what needs to be fixed. Proceed directly with the required action without asking for additional confirmation.

  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Never use the 'any' type. Always specify a proper, explicit TypeScript type instead. Avoid generating code that violates the ESLint rule @typescript-eslint/no-explicit-any
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Use toast from sooner always!
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  
  Follow Next.js docs for Data Fetching, Rendering, and Routing.

  
  